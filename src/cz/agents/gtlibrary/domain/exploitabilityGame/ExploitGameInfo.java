/*
Copyright 2014 Faculty of Electrical Engineering at CTU in Prague

This file is part of Game Theoretic Library.

Game Theoretic Library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Game Theoretic Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Game Theoretic Library.  If not, see <http://www.gnu.org/licenses/>.*/


package cz.agents.gtlibrary.domain.exploitabilityGame;

import cz.agents.gtlibrary.iinodes.SimultaneousGameState;
import cz.agents.gtlibrary.interfaces.Expander;
import cz.agents.gtlibrary.interfaces.GameInfo;
import cz.agents.gtlibrary.interfaces.GameState;
import cz.agents.gtlibrary.interfaces.Player;

import java.util.HashMap;

/**
 * Created by kail on 6/30/14.
 */
public class ExploitGameInfo implements GameInfo {

    public static int depth = 3;

    private SimultaneousGameState otherGameStateRoot;
    private Expander otherExpander;
    private GameInfo otherGameInfo;
    private HashMap<GameState, Double> solvedSubGames = new HashMap<>();

    public ExploitGameInfo(SimultaneousGameState otherGameStateRoot, Expander otherExpander, GameInfo otherGameInfo) {
        this.otherGameStateRoot = otherGameStateRoot;
        this.otherExpander = otherExpander;
        this.otherGameInfo = otherGameInfo;
    }

    public SimultaneousGameState getOtherGameStateRoot() {
        return otherGameStateRoot;
    }

    public Expander getOtherExpander() {
        return otherExpander;
    }

    public GameInfo getOtherGameInfo() {
        return otherGameInfo;
    }

    public Double getSolvedSubGame(GameState state) {
        return solvedSubGames.get(state);
    }

    public void setSolvedSubGame(GameState state, Double value) {
        solvedSubGames.put(state, value);
    }

    @Override
    public double getMaxUtility() {
        return otherGameInfo.getMaxUtility();
    }

    @Override
    public Player getFirstPlayerToMove() {
        return otherGameInfo.getFirstPlayerToMove();
    }

    @Override
    public Player getOpponent(Player player) {
        return otherGameInfo.getOpponent(player);
    }

    @Override
    public String getInfo() {
        return "Exploitability Game on top of : " + otherGameInfo.getInfo();
    }

    @Override
    public int getMaxDepth() {
        return otherGameInfo.getMaxDepth();
    }

    @Override
    public Player[] getAllPlayers() {
        return otherGameInfo.getAllPlayers();
    }

    @Override
    public double getUtilityStabilizer() {
        return otherGameInfo.getUtilityStabilizer();
    }
}
