package cz.agents.gtlibrary.domain.exploitabilityGame;

import cz.agents.gtlibrary.interfaces.Expander;
import cz.agents.gtlibrary.interfaces.GameInfo;
import cz.agents.gtlibrary.interfaces.GameState;
import cz.agents.gtlibrary.interfaces.Player;

import java.util.HashMap;

/**
 * Created by kail on 6/30/14.
 */
public class ExploitGameInfo implements GameInfo {

    private GameState otherGameStateRoot;
    private Expander otherExpander;
    private GameInfo otherGameInfo;
    private HashMap<GameState, Double> solvedSubGames = new HashMap<>();

    public ExploitGameInfo(GameState otherGameStateRoot, Expander otherExpander, GameInfo otherGameInfo) {
        this.otherGameStateRoot = otherGameStateRoot;
        this.otherExpander = otherExpander;
        this.otherGameInfo = otherGameInfo;
    }

    public GameState getOtherGameStateRoot() {
        return otherGameStateRoot;
    }

    public Expander getOtherExpander() {
        return otherExpander;
    }

    public GameInfo getOtherGameInfo() {
        return otherGameInfo;
    }

    public Double getSolvedSubGame(GameState state) {
        return solvedSubGames.get(state);
    }

    public void setSolvedSubGame(GameState state, Double value) {
        solvedSubGames.put(state, value);
    }

    @Override
    public double getMaxUtility() {
        return otherGameInfo.getMaxUtility();
    }

    @Override
    public Player getFirstPlayerToMove() {
        return otherGameInfo.getFirstPlayerToMove();
    }

    @Override
    public Player getOpponent(Player player) {
        return otherGameInfo.getOpponent(player);
    }

    @Override
    public String getInfo() {
        return "Exploitability Game on top of : " + otherGameInfo.getInfo();
    }

    @Override
    public int getMaxDepth() {
        return otherGameInfo.getMaxDepth();
    }

    @Override
    public Player[] getAllPlayers() {
        return otherGameInfo.getAllPlayers();
    }

    @Override
    public double getUtilityStabilizer() {
        return otherGameInfo.getUtilityStabilizer();
    }
}
