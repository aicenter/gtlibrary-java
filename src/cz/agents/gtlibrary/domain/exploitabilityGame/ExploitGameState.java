package cz.agents.gtlibrary.domain.exploitabilityGame;

import cz.agents.gtlibrary.iinodes.SimultaneousGameState;
import cz.agents.gtlibrary.interfaces.*;
import cz.agents.gtlibrary.nfg.simalphabeta.SimAlphaBeta;
import cz.agents.gtlibrary.nfg.simalphabeta.SimAlphaBetaResult;
import cz.agents.gtlibrary.utils.Pair;

/**
 * Created by bosansky on 6/30/14.
 */
public class ExploitGameState extends SimultaneousGameState {

    private ExploitGameInfo gameInfo;
    private GameState otherGameState;
    private int round = 0;


    public ExploitGameState(ExploitGameInfo gameInfo) {
        super(gameInfo.getAllPlayers());
        this.gameInfo = gameInfo;
        this.otherGameState = gameInfo.getOtherGameStateRoot();
    }

    public ExploitGameState(ExploitGameState gameState) {
        super(gameState);
        this.gameInfo = gameState.gameInfo;
        this.otherGameState = gameState.otherGameState.copy();
        this.round = gameState.round;
    }


    public void executeAction(ExploitAction exploitAction) {
        otherGameState.performActionModifyingThisState(exploitAction.getOtherAction());
        int min = Integer.MAX_VALUE;
        for (Player p : getAllPlayers()) {
            min = Math.min(min, otherGameState.getSequenceFor(p).size());
        }
        round = min;
    }

    @Override
    public void setDepth(int depth) {
        this.depth = round + depth;
    }

    @Override
    protected double[] getEndGameUtilities() {
        Double value = gameInfo.getSolvedSubGame(this);
        if (value == null) {
            SimAlphaBeta sab = new SimAlphaBeta();
            value = sab.runSimAlpabeta(otherGameState, gameInfo.getOtherExpander(),  true, true, false, false, gameInfo.getOtherGameInfo());
            gameInfo.setSolvedSubGame(this, value);
        }
        return new double[] {value, -value,0 };
    }

    @Override
    public boolean isActualGameEnd() {
        return round >= 1;
    }

    @Override
    public boolean isDepthLimit() {
        return round >= depth;
    }

    @Override
    public Player getPlayerToMove() {
        return otherGameState.getPlayerToMove();
    }

    @Override
    public GameState copy() {
        return new ExploitGameState(this);
    }

    @Override
    public double getProbabilityOfNatureFor(Action action) {
        return 1;
    }

    @Override
    public boolean isPlayerToMoveNature() {
        return false;
    }

    @Override
    public Pair<Integer, Sequence> getISKeyForPlayerToMove() {
        return otherGameState.getISKeyForPlayerToMove();
    }

    @Override
    public int hashCode() {
        return otherGameState.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        return otherGameState.equals(((ExploitGameState)obj).otherGameState);
    }

    public GameState getOtherGameState() {
        return otherGameState;
    }

    public String toString() {
        return "EXP:"+otherGameState.toString();
    }
}
